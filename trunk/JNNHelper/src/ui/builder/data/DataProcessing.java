/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DataClustering.java
 *
 * Created on Apr 11, 2009, 11:59:45 AM
 */

package ui.builder.data;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JCheckBox;
import jneuralnet.core.NeuralNetwork;
import jneuralnet.core.preprocessor.AbstractInputPreprocessor;
import jneuralnet.core.preprocessor.AbstractOutputPreprocessor;
import jneuralnet.core.preprocessor.CompoundInputPreprocessor;
import jneuralnet.core.preprocessor.CompoundOutputPreprocessor;
import jnnhelper.Configuration;
import jnnhelper.MainWindow;
import utilities.MyPainters;

/**
 *
 * @author Ragha
 */
public class DataProcessing extends javax.swing.JPanel
{
    public static final String ID = "Setup Preprocessors";
    private static DataProcessing instance;

    public static DataProcessing getInstance()
    {
        return instance;
    }

    /** Creates new form DataClustering */
    public DataProcessing()
    {
        initComponents();
        instance = this;

        Configuration.getInstance().addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getPropertyName().equals("neuralNetwork"))
                {                    
                    NeuralNetwork nn = (NeuralNetwork) evt.getNewValue();
                    if(nn != null) {
                        nn.setInputPreprocessor(cip);
                        nn.setOutputPreprocessor(cop);
                    }
                }
            }
        });
        
        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());
        jXPanel1.setBackgroundPainter(MyPainters.getFooterPanelPainter());

        mapInputProcessors = new HashMap<JCheckBox, AbstractInputPreprocessor>();
        mapOutputProcessors = new HashMap<JCheckBox, AbstractOutputPreprocessor>();
        refresh();        
    }

    private HashMap<JCheckBox, AbstractInputPreprocessor> mapInputProcessors;
    private HashMap<JCheckBox, AbstractOutputPreprocessor> mapOutputProcessors;
    public void refresh()
    {
        Configuration cfg = Configuration.getInstance();
        HashMap<String, AbstractInputPreprocessor> mapIP = cfg
                .getMapInputPreprocessors()
                .getUnWrappedPluginMap(AbstractInputPreprocessor.class, false);                
        HashMap<String, AbstractOutputPreprocessor> mapOP = cfg
                .getMapOutputPreprocessors()
                .getUnWrappedPluginMap(AbstractOutputPreprocessor.class, false);
        
        mapInputProcessors.clear();
        mapOutputProcessors.clear();
        
        for(AbstractInputPreprocessor ip : mapIP.values())
        {
            JCheckBox ckb = new JCheckBox(ip.getName());
            mapInputProcessors.put(ckb, ip);
            pnlInputProcessors.add(ckb);
        }
        pnlInputProcessors.validate();

        for(AbstractOutputPreprocessor op : mapOP.values())
        {
            JCheckBox ckb = new JCheckBox(op.getName());
            mapOutputProcessors.put(ckb, op);
            pnlOutputProcessors.add(ckb);
        }
        pnlOutputProcessors.validate();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        btnApply = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pnlInputProcessors = new org.jdesktop.swingx.JXPanel();
        pnlOutputProcessors = new org.jdesktop.swingx.JXPanel();

        setLayout(new java.awt.BorderLayout());

        jXHeader1.setTitle("<html>\n<h3>Data Preprocessing</h3>\n<p>\nLets you add compound input and output preprocessors\n</html>"); // NOI18N
        jXHeader1.setTitleFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jXHeader1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jXHeader1.setPreferredSize(new java.awt.Dimension(307, 81));
        add(jXHeader1, java.awt.BorderLayout.PAGE_START);

        jXPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnApply.setText("Apply"); // NOI18N
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jXPanel1Layout = new javax.swing.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel1Layout.createSequentialGroup()
                .addContainerGap(549, Short.MAX_VALUE)
                .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnApply)
                .addContainerGap())
        );

        add(jXPanel1, java.awt.BorderLayout.PAGE_END);

        pnlInputProcessors.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DataProcessing.class, "DataProcessing.pnlInputProcessors.border.title"))); // NOI18N
        pnlInputProcessors.setLayout(new javax.swing.BoxLayout(pnlInputProcessors, javax.swing.BoxLayout.LINE_AXIS));

        pnlOutputProcessors.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DataProcessing.class, "DataProcessing.pnlOutputProcessors.border.title"))); // NOI18N
        pnlOutputProcessors.setLayout(new javax.swing.BoxLayout(pnlOutputProcessors, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInputProcessors, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOutputProcessors, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pnlInputProcessors, pnlOutputProcessors});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pnlInputProcessors, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlOutputProcessors, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pnlInputProcessors, pnlOutputProcessors});

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private CompoundInputPreprocessor cip = new CompoundInputPreprocessor();
    private CompoundOutputPreprocessor cop = new CompoundOutputPreprocessor();
    private ArrayList<AbstractInputPreprocessor> arrInputProcessors = 
            new ArrayList<AbstractInputPreprocessor>();
    private ArrayList<AbstractOutputPreprocessor> arrOutputProcessors =
            new ArrayList<AbstractOutputPreprocessor>();
    
    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        arrInputProcessors.clear();
        for(JCheckBox ckb : mapInputProcessors.keySet())
        {
            if(ckb.isSelected())
            {
                AbstractInputPreprocessor ip = (AbstractInputPreprocessor)
                        mapInputProcessors.get(ckb);
                arrInputProcessors.add(ip);
            }
        }

        arrOutputProcessors.clear();
        for(JCheckBox ckb : mapOutputProcessors.keySet())
        {
            if(ckb.isSelected())
            {
                AbstractOutputPreprocessor op = (AbstractOutputPreprocessor)
                        mapOutputProcessors.get(ckb);
                arrOutputProcessors.add(op);
            }
        }

        AbstractInputPreprocessor aip[] =
                new AbstractInputPreprocessor[arrInputProcessors.size()];
        AbstractOutputPreprocessor aop[] =
                new AbstractOutputPreprocessor[arrOutputProcessors.size()];

        aip = arrInputProcessors.toArray(aip);
        aop = arrOutputProcessors.toArray(aop);
        cip.setPreprocessors(aip);
        cop.setPreprocessors(aop);
        
        Configuration.getInstance().getNeuralNetwork()
                    .setInputPreprocessor(cip);
        Configuration.getInstance().getNeuralNetwork()
                    .setOutputPreprocessor(cop);

        String msg = "";
        if(cip.getPreprocessors().length > 0)
            msg += "Applied " + cip.toString();
        else
            msg += "No input preprocessor";
        
        if(cop.getPreprocessors().length > 0)
            msg += " AND " + cop.toString();
        else
            msg += " AND no output preprocessor";        

        MainWindow.getInstance().getStatusBar().showMessage(msg);
        DataBuilderStatus.getInstance().refreshStatus();        
}//GEN-LAST:event_btnApplyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JPanel jPanel1;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXPanel pnlInputProcessors;
    private org.jdesktop.swingx.JXPanel pnlOutputProcessors;
    // End of variables declaration//GEN-END:variables

}
