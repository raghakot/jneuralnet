/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jnnhelper;

/*
 * NewMainWindow.java
 *
 * Created on Feb 11, 2009, 7:57:14 PM
 */

import java.awt.Color;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import jneuralnet.core.NeuralNetwork;
import pluginmanager.PluginManagerUI;
import ragha.ui.MyStatusBar;
import ragha.ui.coolsidepanel.Category;
import ui.builder.network.*;
import ui.builder.data.*;
import ui.builder.analyzer.*;
import ui.builder.trainer.*;
import utilities.FileManager;
import utilities.MyPainters;

/**
 *
 * @author Ragha
 */
public class MainWindow extends javax.swing.JFrame
{
    private static MainWindow instance;

    public static MainWindow getInstance()
    {
        return instance;
    }

    public MainWindow()
    {
        initComponents();
        initMyComponents();

        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        instance = this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        pnlDisp = new javax.swing.JPanel();
        scrollDisp = new javax.swing.JScrollPane();
        pnlSelection = new javax.swing.JPanel();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        coolSidebar1 = new ragha.ui.coolsidepanel.CoolSidebar();
        myStatusBar = new ragha.ui.MyStatusBar();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileitemXMLExport = new javax.swing.JMenu();
        fileitemSave = new javax.swing.JMenuItem();
        fileitemLoad = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        fileItemXMLExport = new javax.swing.JMenuItem();
        fileitemXMLImport = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        fileitemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JNeuralNet Helper Tool");

        jSplitPane1.setDividerLocation(200);

        pnlDisp.setLayout(new java.awt.BorderLayout());
        pnlDisp.add(scrollDisp, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(pnlDisp);

        pnlSelection.setLayout(new java.awt.BorderLayout());

        jXHeader1.setTitle("Tasks Panel");
        pnlSelection.add(jXHeader1, java.awt.BorderLayout.PAGE_START);
        pnlSelection.add(coolSidebar1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(pnlSelection);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);
        getContentPane().add(myStatusBar, java.awt.BorderLayout.SOUTH);

        fileitemXMLExport.setText("File");

        fileitemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileitemSave.setText("Save Network");
        fileitemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileitemSaveActionPerformed(evt);
            }
        });
        fileitemXMLExport.add(fileitemSave);

        fileitemLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileitemLoad.setText("Load Network");
        fileitemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileitemLoadActionPerformed(evt);
            }
        });
        fileitemXMLExport.add(fileitemLoad);
        fileitemXMLExport.add(jSeparator1);

        fileItemXMLExport.setText("Export to XML");
        fileItemXMLExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileItemXMLExportActionPerformed(evt);
            }
        });
        fileitemXMLExport.add(fileItemXMLExport);

        fileitemXMLImport.setText("Import from XML");
        fileitemXMLImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileitemXMLImportActionPerformed(evt);
            }
        });
        fileitemXMLExport.add(fileitemXMLImport);
        fileitemXMLExport.add(jSeparator4);

        fileitemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        fileitemExit.setText("Exit");
        fileitemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileitemExitActionPerformed(evt);
            }
        });
        fileitemXMLExport.add(fileitemExit);

        jMenuBar2.add(fileitemXMLExport);

        jMenu2.setText("Options");

        jMenuItem3.setText("Plugin Manager");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar2.add(jMenu2);

        jMenu1.setText("Help");

        jMenuItem2.setText("Help");
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("About");
        jMenu1.add(jMenuItem1);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileitemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileitemSaveActionPerformed
        String fname = FileManager.getSaveFile("NeuralNet Files", "nn");
        if(fname == null)
            return;

        try {
            if(!fname.toLowerCase().endsWith(".nn"))
                fname += ".nn";

            Configuration.getInstance().getNeuralNetwork().saveNet(fname);
            myStatusBar.showMessage("Successfully saved to "+fname);
        } catch(Exception e) {            
            myStatusBar.showMessage(e.toString(), Color.RED);
        }
}//GEN-LAST:event_fileitemSaveActionPerformed

    private void fileitemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileitemLoadActionPerformed
        String fname = FileManager.getLoadFile("NeuralNet Files", "nn");
        if(fname == null)
            return;

        try {
            Configuration.getInstance().setNeuralNetwork(
                    NeuralNetwork.loadNet(fname));
            myStatusBar.showMessage(fname+" successfully loaded!");
        } catch(Exception e) {
            myStatusBar.showMessage(e.toString(), Color.RED);
        }
}//GEN-LAST:event_fileitemLoadActionPerformed

    private void fileitemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileitemExitActionPerformed
        System.exit(0);
}//GEN-LAST:event_fileitemExitActionPerformed

    private void fileitemXMLImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileitemXMLImportActionPerformed
        String fname = FileManager.getLoadFile("XML Files", "xml");
        if(fname == null)
            return;

        try {
            Configuration.getInstance().setNeuralNetwork(
                    NeuralNetwork.loadFromXML(fname));
            myStatusBar.showMessage(fname+" successfully loaded!");
        } catch(Exception e) {
            e.printStackTrace();
            myStatusBar.showMessage(e.toString(), Color.RED);
        }
}//GEN-LAST:event_fileitemXMLImportActionPerformed

    private void fileItemXMLExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileItemXMLExportActionPerformed
        String fname = FileManager.getLoadFile("XML Files", "xml");
        if(fname == null)
            return;

        try {
            if(!fname.toLowerCase().endsWith(".xml"))
                fname += ".xml";
            
            Configuration.getInstance().getNeuralNetwork().saveToXML(fname);
            myStatusBar.showMessage("Successfully saved to "+fname);
        } catch(Exception e) {            
            myStatusBar.showMessage(e.toString(), Color.RED);
        }
}//GEN-LAST:event_fileItemXMLExportActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new PluginManagerUI(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    private void initMyComponents()
    {
        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());
        myStatusBar.getStatusLabel().setFont(new Font("Arial", Font.BOLD, 14));
        myStatusBar.getStatusLabel().setHorizontalAlignment(
                SwingConstants.CENTER);                
        
        JPanel pnlNetworkBuilder = new NetworkBuilder();
        scrollDisp.setViewportView(pnlNetworkBuilder);

        //Build cool side panel...
        Category networkBuilder = new Category(NetworkBuilder.ID, pnlNetworkBuilder) {
            @Override
            public void onPanelShift(JPanel pnl) {                
                scrollDisp.setViewportView(pnl);                
            }
        };        
        
        Category dataBuilder = new Category(DataBuilderStatus.ID, new DataBuilderStatus()) {
            @Override
            public void onPanelShift(JPanel pnl) {
                scrollDisp.setViewportView(pnl);
            }
        };
        dataBuilder.addSubTitle(DataBuilder.ID, new DataBuilder());
        dataBuilder.addSubTitle(DataClustering.ID, new DataClustering());
        dataBuilder.addSubTitle(DataProcessing.ID, new DataProcessing());

        Category trainer = new Category(Trainer.ID, new Trainer()) {
            @Override
            public void onPanelShift(JPanel pnl) {
                scrollDisp.setViewportView(pnl);
            }
        };

        Category analyzer = new Category(Analyzer.ID, new Analyzer()) {
            @Override
            public void onPanelShift(JPanel pnl) {
                scrollDisp.setViewportView(pnl);
            }
        };

        coolSidebar1.addCategory(networkBuilder);
        coolSidebar1.addCategory(dataBuilder);
        coolSidebar1.addCategory(trainer);
        coolSidebar1.addCategory(analyzer);
    }
    
    public void setTrainingStatus(boolean status)
    {        
        if(status)
        {
            coolSidebar1.getCategory(0).getLabelComponent(NetworkBuilder.ID).setEnabled(false);
            coolSidebar1.getCategory(1).getLabelComponent(DataBuilder.ID).setEnabled(false);
            coolSidebar1.getCategory(3).getLabelComponent(Analyzer.ID).setEnabled(false);
        }
        else
        {
            coolSidebar1.getCategory(0).getLabelComponent(NetworkBuilder.ID).setEnabled(true);
            coolSidebar1.getCategory(1).getLabelComponent(DataBuilder.ID).setEnabled(true);
            coolSidebar1.getCategory(3).getLabelComponent(Analyzer.ID).setEnabled(true);
        }        
    }

    public MyStatusBar getStatusBar()
    {
        return myStatusBar;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ragha.ui.coolsidepanel.CoolSidebar coolSidebar1;
    private javax.swing.JMenuItem fileItemXMLExport;
    private javax.swing.JMenuItem fileitemExit;
    private javax.swing.JMenuItem fileitemLoad;
    private javax.swing.JMenuItem fileitemSave;
    private javax.swing.JMenu fileitemXMLExport;
    private javax.swing.JMenuItem fileitemXMLImport;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private ragha.ui.MyStatusBar myStatusBar;
    private javax.swing.JPanel pnlDisp;
    private javax.swing.JPanel pnlSelection;
    private javax.swing.JScrollPane scrollDisp;
    // End of variables declaration//GEN-END:variables

}
