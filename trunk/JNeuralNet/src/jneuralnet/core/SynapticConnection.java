/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jneuralnet.core;

import java.io.Serializable;
import java.util.Random;
import jneuralnet.core.learning.AbstractBPBasedAlgo;

/**
 * This class represents the Synaptic connection between two neurons.
 * A <tt>SynapticConnection</tt> is defined by the <tt>weight</tt>
 * it encapsulates.
 *
 * <p>This class extends the <tt>Bufferable</tt> and hence supports
 * dynamic property addition.
 *
 * @author Ragha
 * @see Bufferable
 * @version 1.0
 */
public class SynapticConnection extends Bufferable implements Serializable
{
    private static final long serialVersionUID = -814420517310221667L;
    
    /**
     * The <i>weight</i> of this syanpse.
     */
    private double weight;

    /**
     * Creates a syanptic connection with a random weight value
     * between min and max.
     *
     * <p>Weight is generated by using the expression: <br>
     * <code>rand.nextDouble() * (max - min) + min</code>
     *
     * <p>Default values of momentum and learning is 0.6 and 0.4
     * respectively.
     *
     * @param min The lower limit of the random weight to be generated
     * @param max The upper limit of the random weight to be generated
     *
     * @see Random
     */
    public SynapticConnection(double min, double max)
    {
        Random rand = new Random();
        weight = rand.nextDouble() * (max - min) + min;
        momentum = 0.6;
        learningRate = 0.4;        
        prevWeightChange = 0.0;
        isLastErrGradientPositive = true;
    }

    /**
     * Generates the connection with weight as 
     * a random value between (-1, +1)
     *
     * @see Random
     */
    public SynapticConnection()
    {
        this(-1, 1);
    }

    /**
     * Sets the weight of this synapse.
     * @param weight The value to be set.
     */
    public void setWeight(double weight)
    {        
        set("weight", weight);
    }

    /**
     * Gets the weight value represented by this synapse.
     * @return The weight represented by this synapse.
     */
    public double getWeight()
    {
        return weight;
    }

    /**
     * Represents the momentum term used for the weight updates
     * of this synaptic connection.
     */
    private double momentum;

    /**
     *
     * @return The current momentum
     */
    public double getMomentum()
    {
        return momentum;
    }

    /**
     * Sets the momentum for this weight update.
     * @param momentum A value typically between 0 to 1, although other
     * values are also permitted.
     */
    public void setMomentum(double momentum)
    {
        set("momentum", momentum);
    }

    /**
     * The learning rate to be used for weight updates...
     */
    private double learningRate;

    /**
     *
     * @return The learning rate associated with this synapse.
     */
    public double getLearningRate()
    {
        return learningRate;
    }

    /**
     * Sets the learning rate of this syanpse.
     * @param learningRate A value typically between 0 to 1. Other values are
     * also permitted, but not commonly used.
     */
    public void setLearningRate(double learningRate)
    {
        set("learningRate", learningRate);
    }

    /**
     * This parameter is used for accomodating momentum in any learning algo.
     * This is an internally used parameter.
     *
     * @see AbstractBPBasedAlgo
     */
    private double prevWeightChange;

    /**
     * This method has its use in the Learning Also.
     *
     * @return The last known weight change to this connection.
     * @see AbstractBPBasedAlgo
     */
    public double getPrevWeightChange()
    {
        return prevWeightChange;
    }

    /**
     * Sets the weight change. This parameter is used internally to accomidate
     * for the momentum term.
     *
     * @param prevWeightChange The weight change to be set.
     */
    public void setPrevWeightChange(double prevWeightChange)
    {
        this.prevWeightChange = prevWeightChange;
    }

    /**
     * This parameter is used for accomodating dynamic learning
     * into any learning algo. This is an internally used parameter.
     * 
     * @see AbstractBPBasedAlgo
     */
    private boolean isLastErrGradientPositive;

    /**
     * This method has its use in the Learning Also.
     *
     * @return true, if the previous gradient was positive.
     * @see AbstractBPBasedAlgo
     */
    public boolean isIsLastErrGradientPositive()
    {
        return isLastErrGradientPositive;
    }

    public void setIsLastErrGradientPositive(boolean isLastErrGradientPositive)
    {
        set("isLastErrGradientPositive", isLastErrGradientPositive);
    }

    @Override
    public String toString()
    {
        String ret = "Connection Weight : " + weight + "\n" +
                "Learning rate : " + learningRate + "\n" +
                "Momentum : " + momentum + "\n";
        return ret;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null)
        {
            return false;
        }
        if (getClass() != obj.getClass())
        {
            return false;
        }
        final SynapticConnection other = (SynapticConnection) obj;
        if (this.weight != other.weight)
        {
            return false;
        }
        if (this.momentum != other.momentum)
        {
            return false;
        }
        if (this.learningRate != other.learningRate)
        {
            return false;
        }
        if (this.isLastErrGradientPositive != other.isLastErrGradientPositive)
        {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode()
    {
        int hash = 5;
        hash = 89 * hash + (int) (Double.doubleToLongBits(this.weight) ^ (Double.doubleToLongBits(this.weight) >>> 32));
        hash = 89 * hash + (int) (Double.doubleToLongBits(this.momentum) ^ (Double.doubleToLongBits(this.momentum) >>> 32));
        hash = 89 * hash + (int) (Double.doubleToLongBits(this.learningRate) ^ (Double.doubleToLongBits(this.learningRate) >>> 32));        
        hash = 89 * hash + (this.isLastErrGradientPositive ? 1 : 0);
        return hash;
    }

}
