/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Analyzer.java
 *
 * Created on Feb 7, 2009, 4:39:26 PM
 */
package org.jnnhelper.ui.analyzer;

import java.awt.BorderLayout;
import java.util.HashMap;
import jneuralnet.core.datastore.FileDataStore;
import jneuralnet.core.training.TrainingPattern;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jnnhelper.ui.Configuration;
import org.jnnhelper.ui.MyPainters;
import org.openide.awt.StatusDisplayer;

/**
 *
 * @author Ragha
 */
public class Analyzer extends javax.swing.JPanel
{
    public static final String ID = "Analyzer";
    private DefaultCategoryDataset categoryDataset;
    private JFreeChart chart;

    /** Creates new form Analyzer */
    public Analyzer()
    {
        initComponents();
        initGraphComponents();
        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jPanel1 = new javax.swing.JPanel();
        txtOutputVector = new javax.swing.JTextField();
        txtInputVector = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();
        jPanel2 = new javax.swing.JPanel();
        pnlChart = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jXTitledSeparator2 = new org.jdesktop.swingx.JXTitledSeparator();
        cbxData = new javax.swing.JComboBox();
        pnlFooter = new org.jdesktop.swingx.JXPanel();
        btnEvalPerformance = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(752, 660));
        setLayout(new java.awt.BorderLayout(0, 10));

        jXHeader1.setTitle("<html>\n<h3>Neural Network Performance Analyzer</h3>\n<p>\nLets you analyze the network performance and check the guessed outputs.\n</html>"); // NOI18N
        jXHeader1.setTitleFont(new java.awt.Font("Tahoma", 0, 11));
        jXHeader1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jXHeader1.setPreferredSize(new java.awt.Dimension(327, 81));
        add(jXHeader1, java.awt.BorderLayout.PAGE_START);

        txtInputVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputVectorActionPerformed(evt);
            }
        });

        jLabel2.setText("Guessed Output");

        jLabel1.setText("Input Vector");

        jXTitledSeparator1.setTitle("Test Network Output");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtInputVector, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                            .addComponent(txtOutputVector, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(317, 317, 317))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtInputVector, txtOutputVector});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtInputVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtOutputVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 10));

        pnlChart.setLayout(new java.awt.BorderLayout());
        jPanel2.add(pnlChart, java.awt.BorderLayout.CENTER);

        jXTitledSeparator2.setTitle("Evaluate Network Performance");

        cbxData.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Training Data", "Validation Data", "Test Data" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXTitledSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addComponent(cbxData, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbxData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        pnlFooter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnEvalPerformance.setText("Evaluate Performance");
        btnEvalPerformance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvalPerformanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEvalPerformance)
                .addContainerGap(551, Short.MAX_VALUE))
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEvalPerformance)
                .addContainerGap())
        );

        jPanel2.add(pnlFooter, java.awt.BorderLayout.PAGE_END);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtInputVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputVectorActionPerformed
        //';' is added as a hack...
        TrainingPattern tp = FileDataStore.parseLine(txtInputVector.getText() + ";" + "1");
        Double output[] = null;

        try
        {
            output = Configuration.getInstance().getNeuralNetwork().getOutput(tp.getInputData());

            txtOutputVector.setText("");
            String s = "";
            for (Double d : output)
            {
                s += d.toString() + ", ";
            }
            s = s.substring(0, s.length() - 2);
            txtOutputVector.setText(s);
        }
        catch (IllegalArgumentException e)
        {
            StatusDisplayer.getDefault().setStatusText(e.getMessage());
        }
}//GEN-LAST:event_txtInputVectorActionPerformed

    private void btnEvalPerformanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvalPerformanceActionPerformed
        try
        {
            int index = cbxData.getSelectedIndex();
            HashMap<TrainingPattern, Double> mapPerformance = null;

            if (index == 0)
            {
                mapPerformance = Configuration.getInstance().getNeuralNetwork().getPerformanceOnTrainingData();
            }
            if (index == 1)
            {
                mapPerformance = Configuration.getInstance().getNeuralNetwork().getPerformanceOnValidationData();
            }
            if (index == 2)
            {
                mapPerformance = Configuration.getInstance().getNeuralNetwork().getPerformanceOnTestData();
            }

            chart.setNotify(false);
            categoryDataset.clear();
            for (TrainingPattern tp : mapPerformance.keySet())
            {
                categoryDataset.addValue(mapPerformance.get(tp), "", tp.toString());
            }
            chart.setNotify(true);
        }
        catch (Exception e)
        {
            StatusDisplayer.getDefault().setStatusText(e.getMessage());
        }
    }//GEN-LAST:event_btnEvalPerformanceActionPerformed

    private void initGraphComponents()
    {
        categoryDataset = new DefaultCategoryDataset();
        chart = ChartFactory.createBarChart3D("Performance Chart",
                "Training Pattern", "Error on cost function",
                categoryDataset,
                PlotOrientation.VERTICAL,
                false, false, false);
        ChartPanel cp = new ChartPanel(chart, false, true, true, true, false);
        pnlChart.add(cp, BorderLayout.CENTER);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEvalPerformance;
    private javax.swing.JComboBox cbxData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator2;
    private javax.swing.JPanel pnlChart;
    private org.jdesktop.swingx.JXPanel pnlFooter;
    private javax.swing.JTextField txtInputVector;
    private javax.swing.JTextField txtOutputVector;
    // End of variables declaration//GEN-END:variables
}
