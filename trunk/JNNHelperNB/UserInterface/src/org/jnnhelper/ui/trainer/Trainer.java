/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Trainer.java
 *
 * Created on Feb 7, 2009, 4:39:21 PM
 */
package org.jnnhelper.ui.trainer;

import org.wrapper.jfreechart.SamplingXYLineRenderer;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import jneuralnet.core.learning.AbstractLearningAlgo;
import jneuralnet.core.training.TrainListenerAdapter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.Iterator;
import jneuralnet.core.NeuralNetwork;
import jneuralnet.core.learning.AbstractBPBasedAlgo;
import jneuralnet.core.learning.costfunction.AbstractCostFunction;
import jneuralnet.core.training.Teacher;
import org.jnnhelper.ui.Configuration;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

/**
 *
 * @author Ragha
 */
public class Trainer extends javax.swing.JPanel implements LookupListener
{
    public static final String ID = "Trainer";
    private NetListener listener;

    //parameters for cost chart...
    private JFreeChart costChart;
    private MyXYSeries costTrainingErrorSeries;
    private MyXYSeries costValidationErrorSeries;
    private XYSeriesCollection costDataSet;

    //parameters for percentage error graph..
    private JFreeChart percentErrorChart;
    private MyXYSeries percentErrorTrainingErrorSeries;
    private MyXYSeries percentErrorValidationErrorSeries;
    private XYSeriesCollection percentErrorDataSet;
    private boolean isTrainSetRemoved = false;
    private boolean isValidationSetRemoved = false;

    private Lookup.Result trainingAlgoResult = null;
    private Lookup.Result costFunctionResult = null;

    public Trainer()
    {
        initComponents();
        initGraphComponents();
        Configuration cfg = Configuration.getInstance();

        //Manage learning algos and cost fucntions that are added dynamically...
        trainingAlgoResult = Lookup.getDefault().lookupResult(AbstractLearningAlgo.class);
        costFunctionResult = Lookup.getDefault().lookupResult(AbstractCostFunction.class);
        trainingAlgoResult.addLookupListener(this);
        costFunctionResult.addLookupListener(this);
        resultChanged(new LookupEvent(trainingAlgoResult));
        resultChanged(new LookupEvent(costFunctionResult));
        
        listener = new NetListener();

        Configuration.getInstance().addPropertyChangeListener(new PropertyChangeListener()
        {
            @Override
            public void propertyChange(PropertyChangeEvent evt)
            {
                if (evt.getPropertyName().equals("neuralNetwork"))
                {
                    NeuralNetwork nn = (NeuralNetwork) evt.getNewValue();
                    if (nn != null)
                    {
                        nn.getTeacher().addTrainListener(listener);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTrainingParameters = new javax.swing.JPanel();
        lblAcceptableError = new javax.swing.JLabel();
        txtAcceptableError = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cbxTrainingAlgo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMinCycles = new javax.swing.JTextField();
        txtMaxCycles = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbxCostFunction = new javax.swing.JComboBox();
        cbxStopErrorType = new javax.swing.JComboBox();
        ckbMomentum = new javax.swing.JCheckBox();
        ckbDynamicLearning = new javax.swing.JCheckBox();
        pnlFooter = new javax.swing.JPanel();
        btnPause = new javax.swing.JButton();
        btnResume = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        txtEpochsElapsed = new javax.swing.JTextField();
        lblEpochsElapsed = new javax.swing.JLabel();
        ckbShowTrainingError = new javax.swing.JCheckBox();
        ckbShowValidationError = new javax.swing.JCheckBox();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();
        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        pnlCostGraph = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblCurrentError = new javax.swing.JLabel();
        txtCostTrainingError = new javax.swing.JTextField();
        txtCostValidationError = new javax.swing.JTextField();
        jXPanel2 = new org.jdesktop.swingx.JXPanel();
        pnlPercentErrorGraph = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblCurrentError1 = new javax.swing.JLabel();
        txtPercentTrainingError = new javax.swing.JTextField();
        txtPercentValidationError = new javax.swing.JTextField();

        panelTrainingParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Training Parameters"));

        lblAcceptableError.setText("Stop Error");

        txtAcceptableError.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAcceptableError.setText("0.0001");

        jLabel1.setText("Training Algo");

        cbxTrainingAlgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTrainingAlgoActionPerformed(evt);
            }
        });

        jLabel6.setText("Minimum Cycles");

        jLabel7.setText("Maximum Cycles");

        txtMinCycles.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMinCycles.setText("100");

        txtMaxCycles.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMaxCycles.setText("50000");

        jLabel3.setText("Cost Function");

        cbxStopErrorType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cost Function Error", "Percentage Error" }));

        ckbMomentum.setText("Momentum");

        ckbDynamicLearning.setText("Dynamic Learning Rate");

        javax.swing.GroupLayout panelTrainingParametersLayout = new javax.swing.GroupLayout(panelTrainingParameters);
        panelTrainingParameters.setLayout(panelTrainingParametersLayout);
        panelTrainingParametersLayout.setHorizontalGroup(
            panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTrainingParametersLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAcceptableError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cbxCostFunction, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTrainingParametersLayout.createSequentialGroup()
                        .addComponent(txtAcceptableError, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxStopErrorType, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxTrainingAlgo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTrainingParametersLayout.createSequentialGroup()
                        .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaxCycles)
                            .addComponent(txtMinCycles, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelTrainingParametersLayout.createSequentialGroup()
                        .addComponent(ckbMomentum)
                        .addGap(18, 18, 18)
                        .addComponent(ckbDynamicLearning)))
                .addGap(37, 37, 37))
        );
        panelTrainingParametersLayout.setVerticalGroup(
            panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTrainingParametersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel6)
                        .addComponent(txtMinCycles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(txtAcceptableError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAcceptableError)
                        .addComponent(cbxStopErrorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(cbxTrainingAlgo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtMaxCycles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTrainingParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cbxCostFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ckbMomentum)
                    .addComponent(ckbDynamicLearning)))
        );

        pnlFooter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnPause.setText("Pause");
        btnPause.setEnabled(false);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnResume.setText("Resume");
        btnResume.setEnabled(false);
        btnResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        txtEpochsElapsed.setBackground(new java.awt.Color(255, 255, 255));
        txtEpochsElapsed.setEditable(false);
        txtEpochsElapsed.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblEpochsElapsed.setText("Epochs Elapsed");

        ckbShowTrainingError.setSelected(true);
        ckbShowTrainingError.setText("Show Training Error");
        ckbShowTrainingError.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckbShowTrainingErrorItemStateChanged(evt);
            }
        });

        ckbShowValidationError.setSelected(true);
        ckbShowValidationError.setText("Show Validation Error");
        ckbShowValidationError.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckbShowValidationErrorItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFooterLayout.createSequentialGroup()
                        .addComponent(lblEpochsElapsed)
                        .addGap(18, 18, 18)
                        .addComponent(txtEpochsElapsed, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                    .addGroup(pnlFooterLayout.createSequentialGroup()
                        .addComponent(ckbShowTrainingError)
                        .addGap(18, 18, 18)
                        .addComponent(ckbShowValidationError, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
                .addGap(171, 171, 171)
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlFooterLayout.createSequentialGroup()
                        .addComponent(btnResume)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPause))
                    .addGroup(pnlFooterLayout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlFooterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPause, btnResume, btnStart, btnStop});

        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtEpochsElapsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEpochsElapsed)
                    .addComponent(btnStart)
                    .addComponent(btnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ckbShowValidationError)
                    .addComponent(ckbShowTrainingError)
                    .addComponent(btnResume)
                    .addComponent(btnPause))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jXTitledSeparator1.setTitle("Error Graphs");

        jXPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlCostGraph.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Cost Validation Error");

        lblCurrentError.setText("Cost Training Error");

        txtCostTrainingError.setBackground(new java.awt.Color(255, 255, 255));
        txtCostTrainingError.setEditable(false);
        txtCostTrainingError.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCostValidationError.setBackground(new java.awt.Color(255, 255, 255));
        txtCostValidationError.setEditable(false);
        txtCostValidationError.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jXPanel1Layout = new javax.swing.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlCostGraph, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addComponent(lblCurrentError)
                        .addGap(18, 18, 18)
                        .addComponent(txtCostTrainingError, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                        .addGap(110, 110, 110)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtCostValidationError, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jXPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCostTrainingError, txtCostValidationError});

        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCostGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblCurrentError)
                    .addComponent(txtCostTrainingError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCostValidationError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlPercentErrorGraph.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Validation Error %");

        lblCurrentError1.setText("Training Error %");

        txtPercentTrainingError.setBackground(new java.awt.Color(255, 255, 255));
        txtPercentTrainingError.setEditable(false);
        txtPercentTrainingError.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtPercentValidationError.setBackground(new java.awt.Color(255, 255, 255));
        txtPercentValidationError.setEditable(false);
        txtPercentValidationError.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jXPanel2Layout = new javax.swing.GroupLayout(jXPanel2);
        jXPanel2.setLayout(jXPanel2Layout);
        jXPanel2Layout.setHorizontalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlPercentErrorGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jXPanel2Layout.createSequentialGroup()
                        .addComponent(lblCurrentError1)
                        .addGap(18, 18, 18)
                        .addComponent(txtPercentTrainingError, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                        .addGap(115, 115, 115)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtPercentValidationError, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jXPanel2Layout.setVerticalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPercentErrorGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtPercentValidationError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblCurrentError1)
                    .addComponent(txtPercentTrainingError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTrainingParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pnlFooter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jXPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(11, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(panelTrainingParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        Configuration.getInstance().getNeuralNetwork().getTeacher().pauseTraining();
        btnPause.setEnabled(false);
        btnResume.setEnabled(true);
}//GEN-LAST:event_btnPauseActionPerformed

    private void btnResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumeActionPerformed
        Configuration.getInstance().getNeuralNetwork().getTeacher().resumeTraining();
        btnPause.setEnabled(true);
        btnResume.setEnabled(false);
}//GEN-LAST:event_btnResumeActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        Configuration.getInstance().getNeuralNetwork().getTeacher().stopTraining();

        btnStop.setEnabled(false);
        btnPause.setEnabled(false);
        btnResume.setEnabled(false);
        btnStart.setEnabled(true);

        txtAcceptableError.setEnabled(true);
        TrainerTopComponent.getDefault().setTrainingStatus(false);
}//GEN-LAST:event_btnStopActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try
        {            
            NeuralNetwork nn = Configuration.getInstance().getNeuralNetwork();
            AbstractLearningAlgo algo = (AbstractLearningAlgo) cbxTrainingAlgo.getSelectedItem();

            //setup cost function to use...
            if (cbxCostFunction.isEnabled())
            {
                AbstractCostFunction cf = (AbstractCostFunction) cbxCostFunction.getSelectedItem();
                algo.setCostFunction(cf);
            }

            //setup momentum and dynamic learning...
            if (ckbMomentum.isEnabled())
            {
                ((AbstractBPBasedAlgo) algo).setIsMomentumUsed(ckbMomentum.isSelected());
            }
            if (ckbDynamicLearning.isEnabled())
            {
                ((AbstractBPBasedAlgo) algo).setIsLearningRateDynamic(ckbDynamicLearning.isSelected());
            }

            //setup learning algo...
            nn.getTeacher().setLearningAlgo(algo);

            costTrainingErrorSeries.clear();
            costValidationErrorSeries.clear();
            percentErrorTrainingErrorSeries.clear();
            percentErrorValidationErrorSeries.clear();

            Double stopError = 0.0001;
            long minCycles = 100, maxCycles = 50000;

            stopError = Double.parseDouble(txtAcceptableError.getText());
            minCycles = Long.parseLong(txtMinCycles.getText());
            maxCycles = Long.parseLong(txtMaxCycles.getText());

            Configuration.getInstance().setNeuralNetwork(nn);
            int stopErrorType = cbxStopErrorType.getSelectedIndex() == 0
                    ? Teacher.COST_ERROR : Teacher.PERCENTAGE_ERROR;
            nn.getTeacher().startTraining(stopError, minCycles, maxCycles, stopErrorType);
            txtAcceptableError.setEnabled(false);
            TrainerTopComponent.getDefault().setTrainingStatus(true);

            btnPause.setEnabled(true);
            btnStop.setEnabled(true);
            btnStart.setEnabled(false);
        }
        catch (Exception e)
        {
            StatusDisplayer.getDefault().setStatusText(e.getMessage());
        }
}//GEN-LAST:event_btnStartActionPerformed

    private void ckbShowTrainingErrorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckbShowTrainingErrorItemStateChanged
        boolean isPaused = Configuration.getInstance().getNeuralNetwork().getTeacher().isPaused();
        if (!isPaused)
        {
            btnPause.doClick();
        }

        if (!ckbShowTrainingError.isSelected())
        {
            costDataSet.removeSeries(costTrainingErrorSeries);
            percentErrorDataSet.removeSeries(percentErrorTrainingErrorSeries);
            isTrainSetRemoved = true;
        }
        else
        {
            if (isTrainSetRemoved)
            {
                costDataSet.addSeries(costTrainingErrorSeries);
                percentErrorDataSet.addSeries(percentErrorTrainingErrorSeries);
                isTrainSetRemoved = false;
            }
        }

        if (!isPaused)
        {
            btnResume.doClick();
        }
    }//GEN-LAST:event_ckbShowTrainingErrorItemStateChanged

    private void ckbShowValidationErrorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckbShowValidationErrorItemStateChanged
        boolean isPaused = Configuration.getInstance().getNeuralNetwork().getTeacher().isPaused();
        if (!isPaused)
        {
            btnPause.doClick();
        }

        if (!ckbShowValidationError.isSelected())
        {
            costDataSet.removeSeries(costValidationErrorSeries);
            percentErrorDataSet.removeSeries(percentErrorValidationErrorSeries);
            isValidationSetRemoved = true;
        }
        else
        {
            if (isValidationSetRemoved)
            {
                costDataSet.addSeries(costValidationErrorSeries);
                percentErrorDataSet.addSeries(percentErrorValidationErrorSeries);
                isValidationSetRemoved = false;
            }
        }

        if (!isPaused)
        {
            btnResume.doClick();
        }
    }//GEN-LAST:event_ckbShowValidationErrorItemStateChanged

    private void cbxTrainingAlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTrainingAlgoActionPerformed
        int index = cbxTrainingAlgo.getSelectedIndex();
        if (index < 0)
        {
            return;
        }

        String key = cbxTrainingAlgo.getSelectedItem().toString();
        AbstractLearningAlgo algo = (AbstractLearningAlgo) cbxTrainingAlgo.getSelectedItem();

        if (algo.isCostFunctionModifiable())
        {
            cbxCostFunction.setEnabled(true);
        }
        else
        {
            cbxCostFunction.setEnabled(false);
        }

        if (algo instanceof AbstractBPBasedAlgo)
        {
            AbstractBPBasedAlgo bpBasedAlgo = (AbstractBPBasedAlgo) algo;
            if (bpBasedAlgo.isMomentumPermissible())
            {
                ckbMomentum.setEnabled(true);
            }
            else
            {
                ckbMomentum.setEnabled(false);
            }

            if (bpBasedAlgo.isDynamicLearningPermissible())
            {
                ckbDynamicLearning.setEnabled(true);
            }
            else
            {
                ckbDynamicLearning.setEnabled(false);
            }
        }
        else
        {
            ckbMomentum.setEnabled(false);
            ckbDynamicLearning.setEnabled(false);
        }
    }//GEN-LAST:event_cbxTrainingAlgoActionPerformed

    private void initGraphComponents()
    {
        costTrainingErrorSeries = new MyXYSeries("Training Set Error");
        costValidationErrorSeries = new MyXYSeries("Validation Set Error");

        costDataSet = new XYSeriesCollection();
        costDataSet.addSeries(costTrainingErrorSeries);
        costDataSet.addSeries(costValidationErrorSeries);

        costChart = ChartFactory.createXYLineChart(
                "Cost Error Graph", // Title
                "Epochs", // x-axis Label
                "Error on cost function", // y-axis Label
                costDataSet, // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );

        //Optimises memory and cpu util on large data sets...
        //code contributed by david gilbert
        ((XYPlot) costChart.getPlot()).setRenderer(new SamplingXYLineRenderer());

        ChartPanel pnlCostFunctionError = new ChartPanel(costChart, false, true, true, true, false);
        //Trying to reduce memory utilisation...
        pnlCostFunctionError.getChartRenderingInfo().setEntityCollection(null);

        pnlCostGraph.add(pnlCostFunctionError, BorderLayout.CENTER);
        pnlCostGraph.validate();

        //..............................//
        //...init percent error graph...//
        //..............................//

        percentErrorTrainingErrorSeries = new MyXYSeries("Training Set Error");
        percentErrorValidationErrorSeries = new MyXYSeries("Validation Set Error");

        percentErrorDataSet = new XYSeriesCollection();
        percentErrorDataSet.addSeries(percentErrorTrainingErrorSeries);
        percentErrorDataSet.addSeries(percentErrorValidationErrorSeries);

        percentErrorChart = ChartFactory.createXYLineChart(
                "Percentage Error Graph", // Title
                "Epochs", // x-axis Label
                "Percentage Error", // y-axis Label
                percentErrorDataSet, // Dataset
                PlotOrientation.VERTICAL, // Plot Orientation
                true, // Show Legend
                true, // Use tooltips
                false // Configure chart to generate URLs?
                );

        //Optimises memory and cpu util on large data sets...
        //code contributed by david gilbert
        ((XYPlot) percentErrorChart.getPlot()).setRenderer(new SamplingXYLineRenderer());

        ChartPanel pnlPercentError = new ChartPanel(percentErrorChart, false, true, true, true, false);
        //Trying to reduce memory utilisation...
        pnlPercentError.getChartRenderingInfo().setEntityCollection(null);

        pnlPercentErrorGraph.add(pnlPercentError, BorderLayout.CENTER);
        pnlPercentErrorGraph.validate();
    }

    @Override
    public void resultChanged(LookupEvent ev)
    {
        Lookup.Result r = (Result) ev.getSource();
        Collection c = r.allInstances();
        boolean isCostComboRefreshed = false;
        boolean isLearningComboRefreshed = false;

        if(c != null)
        {
            Iterator it = c.iterator();
            while(it.hasNext())
            {
                Object o = it.next();
                if(o instanceof AbstractCostFunction)
                {
                    if(!isCostComboRefreshed)
                    {
                        cbxCostFunction.removeAllItems();
                        isCostComboRefreshed = true;
                    }
                    cbxCostFunction.addItem((AbstractCostFunction) o);
                }
                if(o instanceof AbstractLearningAlgo)
                {
                    if(!isLearningComboRefreshed)
                    {
                        cbxTrainingAlgo.removeAllItems();
                        isLearningComboRefreshed = true;
                    }
                    cbxTrainingAlgo.addItem((AbstractLearningAlgo) o);
                }
            }
        }
    }

    private class NetListener extends TrainListenerAdapter
    {
        @Override
        public void trainCyclePerformed(final Long epoch,
                final Double trainingErrorOnCostFunction,
                final Double validationErrorOnCostFunction,
                final Double trainingErrorPercent,
                final Double validationErrorPercent)
        {
            costChart.setNotify(false);
            if (isTrainSetRemoved)
            {
                costTrainingErrorSeries.addWithoutNotify(epoch, trainingErrorOnCostFunction);
            }
            else
            {
                costTrainingErrorSeries.add(epoch, trainingErrorOnCostFunction);
            }

            if (isValidationSetRemoved)
            {
                costValidationErrorSeries.addWithoutNotify(epoch, validationErrorOnCostFunction);
            }
            else
            {
                costValidationErrorSeries.add(epoch, validationErrorOnCostFunction);
            }
            costChart.setNotify(true);

            //........................................//
            //...Notify data on percent error chart...//
            //........................................//

            percentErrorChart.setNotify(false);
            if (isTrainSetRemoved)
            {
                percentErrorTrainingErrorSeries.addWithoutNotify(epoch, trainingErrorPercent);
            }
            else
            {
                percentErrorTrainingErrorSeries.add(epoch, trainingErrorPercent);
            }

            if (isValidationSetRemoved)
            {
                percentErrorValidationErrorSeries.addWithoutNotify(epoch, validationErrorPercent);
            }
            else
            {
                percentErrorValidationErrorSeries.add(epoch, validationErrorPercent);
            }
            percentErrorChart.setNotify(true);

            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    txtEpochsElapsed.setText(Long.toString(epoch));
                    txtCostTrainingError.setText(Double.toString(trainingErrorOnCostFunction));
                    txtCostValidationError.setText(Double.toString(validationErrorOnCostFunction));
                    txtPercentTrainingError.setText(Double.toString(trainingErrorPercent));
                    txtPercentValidationError.setText(Double.toString(validationErrorPercent));
                }
            });
        }

        @Override
        public void trainingCompleted(final Double finalError)
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    btnStop.setEnabled(false);
                    btnPause.setEnabled(false);
                    btnResume.setEnabled(false);
                    btnStart.setEnabled(true);

                    txtAcceptableError.setEnabled(true);
                    TrainerTopComponent.getDefault().setTrainingStatus(false);
                    StatusDisplayer.getDefault().setStatusText("Final error : " + finalError);
                }
            });
        }
    }    

    private class MyXYSeries extends XYSeries
    {
        private static final long serialVersionUID = 6440258616560624120L;

        public MyXYSeries(Comparable key)
        {
            super(key);
            ((ArrayList) data).ensureCapacity(10000);
        }

        public void addWithoutNotify(Number x, Number y)
        {
            super.add(x, y, false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnPause;
    javax.swing.JButton btnResume;
    javax.swing.JButton btnStart;
    javax.swing.JButton btnStop;
    private javax.swing.JComboBox cbxCostFunction;
    private javax.swing.JComboBox cbxStopErrorType;
    private javax.swing.JComboBox cbxTrainingAlgo;
    private javax.swing.JCheckBox ckbDynamicLearning;
    private javax.swing.JCheckBox ckbMomentum;
    private javax.swing.JCheckBox ckbShowTrainingError;
    private javax.swing.JCheckBox ckbShowValidationError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXPanel jXPanel2;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    private javax.swing.JLabel lblAcceptableError;
    private javax.swing.JLabel lblCurrentError;
    private javax.swing.JLabel lblCurrentError1;
    private javax.swing.JLabel lblEpochsElapsed;
    private javax.swing.JPanel panelTrainingParameters;
    private javax.swing.JPanel pnlCostGraph;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JPanel pnlPercentErrorGraph;
    javax.swing.JTextField txtAcceptableError;
    javax.swing.JTextField txtCostTrainingError;
    javax.swing.JTextField txtCostValidationError;
    javax.swing.JTextField txtEpochsElapsed;
    private javax.swing.JTextField txtMaxCycles;
    private javax.swing.JTextField txtMinCycles;
    javax.swing.JTextField txtPercentTrainingError;
    javax.swing.JTextField txtPercentValidationError;
    // End of variables declaration//GEN-END:variables
}