/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DataBuilder.java
 *
 * Created on Feb 7, 2009, 4:39:15 PM
 */
package org.jnnhelper.ui.databuilder;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jneuralnet.core.NeuralNetwork;
import jneuralnet.core.datastore.AbstractDataStore;
import jneuralnet.core.datastore.FileDataStore;
import jneuralnet.core.training.TrainingPattern;
import jneuralnet.core.training.TrainingSet;
import org.jnnhelper.ui.Configuration;
import org.jnnhelper.ui.MyPainters;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import util.TableManager;

/**
 *
 * @author Ragha
 */
public class DataBuilder extends javax.swing.JPanel implements LookupListener
{
    public static final String ID = "Setup available data";
    private DataTable dataManager;
    private TrainingSet totalData;
    private AbstractDataStore curDataStore;
    private Lookup.Result result = null;

    public DataBuilder()
    {
        initComponents();
        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());

        dataManager = new DataTable(tblData);
        totalData = new TrainingSet();

        //Manage dynamically changing data store providers...
        result = Lookup.getDefault().lookupResult(AbstractDataStore.class);
        result.addLookupListener(this);
        resultChanged(new LookupEvent(result));

        Configuration.getInstance().addPropertyChangeListener(new PropertyChangeListener()
        {
            public void propertyChange(PropertyChangeEvent evt)
            {
                if (evt.getPropertyName().equals("neuralNetwork"))
                {
                    NeuralNetwork nn = (NeuralNetwork) evt.getNewValue();
                    if (nn != null)
                    {
                        nn.getTeacher().getTrainingDataRepository().setTotalAvailableSet(totalData);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtInputData = new javax.swing.JTextField();
        txtOutputData = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAddData = new javax.swing.JButton();
        btnSaveData = new javax.swing.JButton();
        btnLoadData = new javax.swing.JButton();
        btnRemoveData = new javax.swing.JButton();
        pnlDataStoreSelection = new javax.swing.JPanel();
        cbxDataStore = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        scpConfigPnl = new javax.swing.JScrollPane();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new org.jdesktop.swingx.JXTable();

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Input Values");

        jLabel3.setText("Output Values");

        btnAddData.setText("Add");
        btnAddData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDataActionPerformed(evt);
            }
        });

        btnSaveData.setText("Save Data");
        btnSaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDataActionPerformed(evt);
            }
        });

        btnLoadData.setText("Load data");
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });

        btnRemoveData.setText("Remove");
        btnRemoveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInputData, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOutputData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddData, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveData, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLoadData)
                    .addComponent(btnSaveData, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtInputData, txtOutputData});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddData, btnLoadData, btnRemoveData, btnSaveData});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtInputData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnAddData)
                    .addComponent(btnSaveData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtOutputData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveData)
                    .addComponent(btnLoadData)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbxDataStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDataStoreActionPerformed(evt);
            }
        });

        jLabel9.setText("Data Store to be used");

        scpConfigPnl.setPreferredSize(new java.awt.Dimension(327, 2));

        javax.swing.GroupLayout pnlDataStoreSelectionLayout = new javax.swing.GroupLayout(pnlDataStoreSelection);
        pnlDataStoreSelection.setLayout(pnlDataStoreSelectionLayout);
        pnlDataStoreSelectionLayout.setHorizontalGroup(
            pnlDataStoreSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDataStoreSelectionLayout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(28, 28, 28)
                .addComponent(cbxDataStore, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(436, Short.MAX_VALUE))
            .addComponent(scpConfigPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
        );
        pnlDataStoreSelectionLayout.setVerticalGroup(
            pnlDataStoreSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDataStoreSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDataStoreSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxDataStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpConfigPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
        );

        jXHeader1.setTitle("<html>\n<h3>Training Data Table</h3>\n<p>\nSet up the total data available and clustering options to train this neural network.\n</html>"); // NOI18N
        jXHeader1.setTitleFont(new java.awt.Font("Tahoma", 0, 11));
        jXHeader1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jXHeader1.setPreferredSize(new java.awt.Dimension(327, 81));

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Input Vector", "Output Vector"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jXHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addComponent(pnlDataStoreSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDataStoreSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDataActionPerformed
        String line = txtInputData.getText() + ";" +
                txtOutputData.getText();

        TrainingPattern tp = null;
        try
        {
            tp = FileDataStore.parseLine(line);
        }
        catch (IllegalArgumentException e)
        {
            StatusDisplayer.getDefault().setStatusText(e.getMessage());
            return;
        }

        dataManager.addRow(tp);
        totalData.add(tp);
        Configuration.getInstance().getNeuralNetwork().getTeacher().getTrainingDataRepository().setTotalAvailableSet(totalData);
        DataBuilderStatus.getInstance().refreshStatus();
}//GEN-LAST:event_btnAddDataActionPerformed

    private void btnSaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDataActionPerformed
        try
        {
            if (curDataStore != null)
            {
                curDataStore.saveTrainingSet(totalData);            
                StatusDisplayer.getDefault().setStatusText("Data successfully saved!");
            }
        }
        catch (Exception e)
        {
            StatusDisplayer.getDefault().setStatusText("Save failed due to: " + e.getMessage());
        }
}//GEN-LAST:event_btnSaveDataActionPerformed

    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed
        try
        {
            totalData = curDataStore.loadTrainingSet();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            StatusDisplayer.getDefault().setStatusText("Load failed due to:" + e.getMessage());
        }

        if (!totalData.validate(Configuration.getInstance().getNeuralNetwork()))
        {
            StatusDisplayer.getDefault().setStatusText("Data is " +
                    "incompatible with neural network");
        }
        else
        {
            ((DefaultTableModel) tblData.getModel()).setRowCount(0);
            dataManager.populateData(totalData);
            Configuration.getInstance().getNeuralNetwork().getTeacher().getTrainingDataRepository().setTotalAvailableSet(totalData);
            DataBuilderStatus.getInstance().refreshStatus();
        }
}//GEN-LAST:event_btnLoadDataActionPerformed

    private void btnRemoveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDataActionPerformed
        int selRows[] = tblData.getSelectedRows();
        int numRemoved = 0;

        for (int i : selRows)
        {
            totalData.remove(i - numRemoved);
            TableManager.removeRow(tblData, i - numRemoved);
            numRemoved++;
        }
        Configuration.getInstance().getNeuralNetwork().getTeacher().getTrainingDataRepository().setTotalAvailableSet(totalData);
        DataBuilderStatus.getInstance().refreshStatus();
}//GEN-LAST:event_btnRemoveDataActionPerformed

    private void cbxDataStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDataStoreActionPerformed
        curDataStore = (AbstractDataStore) cbxDataStore.getSelectedItem();
        JPanel configPnl = curDataStore.getConfigPanel();
        scpConfigPnl.setViewportView(configPnl);
    }//GEN-LAST:event_cbxDataStoreActionPerformed

    private class DataTable
    {
        private JTable tbl;
        private DefaultTableModel dm;

        public DataTable(JTable tbl)
        {
            this.tbl = tbl;
            dm = (DefaultTableModel) tbl.getModel();
        }

        public void addRow(TrainingPattern tp)
        {
            String str[] =
            {
                "", ""
            };

            for (Double d : tp.getInputData())
            {
                str[0] += d.toString() + ",";
            }
            //removing the last comma
            str[0] = str[0].substring(0, str[0].length() - 1);

            for (Double d : tp.getOutputData())
            {
                str[1] += d.toString() + ",";
            }
            //removing the last comma
            str[1] = str[1].substring(0, str[1].length() - 1);

            dm.addRow(str);
            tbl.repaint();
        }

        public void populateData(final TrainingSet ts)
        {
            new Thread()
            {
                @Override
                public void run()
                {
                    for (TrainingPattern tp : ts.getTrainingPatterns())
                    {
                        addRow(tp);
                    }
                }
            }.start();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddData;
    private javax.swing.JButton btnLoadData;
    private javax.swing.JButton btnRemoveData;
    private javax.swing.JButton btnSaveData;
    private javax.swing.JComboBox cbxDataStore;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private javax.swing.JPanel pnlDataStoreSelection;
    private javax.swing.JScrollPane scpConfigPnl;
    private org.jdesktop.swingx.JXTable tblData;
    private javax.swing.JTextField txtInputData;
    private javax.swing.JTextField txtOutputData;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resultChanged(LookupEvent ev)
    {
        Lookup.Result r = (Result) ev.getSource();
        Collection c = r.allInstances();
        boolean isDatastoresRefreshed = false;

        if(c != null)
        {
            Iterator it = c.iterator();
            while(it.hasNext())
            {
                Object o = it.next();
                if(o instanceof AbstractDataStore)
                {
                    if(!isDatastoresRefreshed)
                    {
                        cbxDataStore.removeAllItems();
                        isDatastoresRefreshed = true;
                    }
                    cbxDataStore.addItem((AbstractDataStore) o);
                }
            }
        }
    }
}