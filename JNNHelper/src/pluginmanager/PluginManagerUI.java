/*
 * Copyright (c) 2008-2009 Kotikalapudi Raghavendra. All Rights Reserved.
 *
 * Licensed under the Creative Commons License Attribution-NonCommercial-ShareAlike 3.0,
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://creativecommons.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * PluginUI.java
 *
 * Created on Apr 27, 2009, 3:12:04 PM
 */
package pluginmanager;

import java.io.IOException;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import jneuralnet.core.Pluggable;
import jneuralnet.core.activation.AbstractActivation;
import jneuralnet.core.datastore.AbstractDataStore;
import jneuralnet.core.learning.AbstractLearningAlgo;
import jneuralnet.core.learning.costfunction.AbstractCostFunction;
import jneuralnet.core.preprocessor.AbstractInputPreprocessor;
import jneuralnet.core.preprocessor.AbstractOutputPreprocessor;
import jnnhelper.Configuration;
import org.openide.util.Exceptions;
import utilities.MyPainters;
import utilities.TableManager;

/**
 *
 * @author Ragha
 */
public class PluginManagerUI extends javax.swing.JDialog
{
    private boolean rescan = false;

    private static final String ACTIVATION = "Activation Function";
    private static final String LEARNING_ALGO = "Learning Algo";
    private static final String DATA_STORE = "Data Store";
    private static final String INPUT_PREPROCESSOR = "Input Preprocessor";
    private static final String OUTPUT_PREPROCESSOR = "Output Preprocessor";
    private static final String COST_FUNCTION = "Cost Function";

    /** Creates new form PluginUI */
    public PluginManagerUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        jXHeader1.setBackgroundPainter(MyPainters.getHeaderPainter());
        jXHeader2.setBackgroundPainter(MyPainters.getHeaderPainter());
        pnlFooter.setBackgroundPainter(MyPainters.getFooterPanelPainter());

        tblPlugins.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        tblPlugins.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {

                int row = tblPlugins.getSelectedRow();
                if (row < 0) {
                    return;
                }
                String plgName = tblPlugins.getValueAt(row, 0).toString();
                String plgType = tblPlugins.getValueAt(row, 1).toString();
                showInfo(plgName, plgType);
            }
        });
        btnRefreshList.doClick();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jXPanel3 = new org.jdesktop.swingx.JXPanel();
        pnlFooter = new org.jdesktop.swingx.JXPanel();
        btnApply = new javax.swing.JButton();
        btnRescan = new javax.swing.JButton();
        btnRefreshList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlugins = new org.jdesktop.swingx.JXTable();
        jXPanel2 = new org.jdesktop.swingx.JXPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        edpDetails = new org.jdesktop.swingx.JXEditorPane();
        jXHeader2 = new org.jdesktop.swingx.JXHeader();
        myStatusBar1 = new ragha.ui.MyStatusBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.title")); // NOI18N

        jXHeader1.setTitle("<html>\n<h3>Plugin Manager</h3>\n<p>\nLets you add, remove, activate or deactivate plugins.\n</html>"); // NOI18N
        jXHeader1.setTitleFont(new java.awt.Font("Tahoma", 0, 11));
        jXHeader1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jXHeader1.setPreferredSize(new java.awt.Dimension(327, 81));
        getContentPane().add(jXHeader1, java.awt.BorderLayout.PAGE_START);

        pnlFooter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnApply.setText(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.btnApply.text")); // NOI18N

        btnRescan.setText(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.btnRescan.text")); // NOI18N
        btnRescan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRescanActionPerformed(evt);
            }
        });

        btnRefreshList.setText(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.btnRefreshList.text")); // NOI18N
        btnRefreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefreshList, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRescan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlFooterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnApply, btnRefreshList});

        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApply)
                    .addComponent(btnRescan)
                    .addComponent(btnRefreshList))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblPlugins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plugin Name", "Plugin Type", "Module Type", "Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPlugins.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblPlugins);
        tblPlugins.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPlugins.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.tblPlugins.columnModel.title0")); // NOI18N
        tblPlugins.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.tblPlugins.columnModel.title1")); // NOI18N
        tblPlugins.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.tblPlugins.columnModel.title2")); // NOI18N
        tblPlugins.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.tblPlugins.columnModel.title3")); // NOI18N

        jXPanel2.setLayout(new java.awt.BorderLayout());

        edpDetails.setContentType(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.edpDetails.contentType")); // NOI18N
        edpDetails.setEditable(false);
        jScrollPane2.setViewportView(edpDetails);

        jXPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jXHeader2.setTitle(org.openide.util.NbBundle.getMessage(PluginManagerUI.class, "PluginManagerUI.jXHeader2.title")); // NOI18N
        jXPanel2.add(jXHeader2, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jXPanel3Layout = new javax.swing.GroupLayout(jXPanel3);
        jXPanel3.setLayout(jXPanel3Layout);
        jXPanel3Layout.setHorizontalGroup(
            jXPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel3Layout.createSequentialGroup()
                .addGroup(jXPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlFooter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jXPanel3Layout.setVerticalGroup(
            jXPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addComponent(jXPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jXPanel3, java.awt.BorderLayout.CENTER);
        getContentPane().add(myStatusBar1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshListActionPerformed
        myStatusBar1.setBusy(true);
        myStatusBar1.showMessage("Refreshing plugin list...please wait");
        performRefresh();
}//GEN-LAST:event_btnRefreshListActionPerformed
    
    private void btnRescanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRescanActionPerformed
        rescan = true;
        myStatusBar1.setBusy(true);
        myStatusBar1.showMessage("Scanning for plugins...please wait");
        performRefresh();
    }//GEN-LAST:event_btnRescanActionPerformed

    private void performRefresh() {

        btnRefreshList.setEnabled(false);
        btnRescan.setEnabled(false);        

        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                TableManager.clearTable(tblPlugins);
                Configuration cfg = Configuration.getInstance();

                if (rescan) {
                    try {
                        PluginManager.getDefault().rescan("plugins");
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }

                // Add activation fucntions...
                for (Plugin<AbstractActivation> plg : cfg.getMapActivations().getWrappedPluginList(AbstractActivation.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                ACTIVATION,
                                plg.getType(),
                                true
                            });
                }

                //Add learning Algos...
                for (Plugin<AbstractLearningAlgo> plg : cfg.getMapLearningAlgos().getWrappedPluginList(AbstractLearningAlgo.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                LEARNING_ALGO,
                                plg.getType(),
                                true
                            });
                }

                // Add data stores...
                for (Plugin<AbstractDataStore> plg : cfg.getMapDataStores().getWrappedPluginList(AbstractDataStore.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                DATA_STORE,
                                plg.getType(),
                                true
                            });
                }

                //Add input preprocessors...
                for (Plugin<AbstractInputPreprocessor> plg : cfg.getMapInputPreprocessors().getWrappedPluginList(AbstractInputPreprocessor.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                INPUT_PREPROCESSOR,
                                plg.getType(),
                                true
                            });
                }

                //Add output preprocessors...
                for (Plugin<AbstractOutputPreprocessor> plg : cfg.getMapOutputPreprocessors().getWrappedPluginList(AbstractOutputPreprocessor.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                OUTPUT_PREPROCESSOR,
                                plg.getType(),
                                true
                            });
                }

                //Add cost function...
                for (Plugin<AbstractCostFunction> plg : cfg.getMapCostFunction().getWrappedPluginList(AbstractCostFunction.class, rescan)) {
                    TableManager.addTableData(tblPlugins, new Object[]{
                                plg.getPlugin().getName(),
                                COST_FUNCTION,
                                plg.getType(),
                                true
                            });
                }

                return null;
            }

            @Override
            protected void done() {
                myStatusBar1.setBusy(false);
                myStatusBar1.showMessage("");
                btnRefreshList.setEnabled(true);
                btnRescan.setEnabled(true);
                rescan = false;
            }
        }.execute();
    }

    private void showInfo(String plgName, String plgType) {
        Configuration cfg = Configuration.getInstance();
        Pluggable plg;
        if (plgType.equals(ACTIVATION)) {
            plg = cfg.getMapActivations().getUnWrappedPluginMap(AbstractActivation.class, false).get(plgName);
        } else if (plgType.equals(LEARNING_ALGO)) {
            plg = cfg.getMapLearningAlgos().getUnWrappedPluginMap(AbstractLearningAlgo.class, false).get(plgName);
        } else if (plgType.equals(DATA_STORE)) {
            plg = cfg.getMapDataStores().getUnWrappedPluginMap(AbstractDataStore.class, false).get(plgName);
        } else if (plgType.equals(INPUT_PREPROCESSOR)) {
            plg = cfg.getMapInputPreprocessors().getUnWrappedPluginMap(AbstractInputPreprocessor.class, false).get(plgName);
        } else if (plgType.equals(OUTPUT_PREPROCESSOR)) {
            plg = cfg.getMapOutputPreprocessors().getUnWrappedPluginMap(AbstractOutputPreprocessor.class, false).get(plgName);
        } else {
            plg = cfg.getMapCostFunction().getUnWrappedPluginMap(AbstractCostFunction.class, false).get(plgName);
        }

        if (plg != null) {
            String info = "<html> <h1>" + plg.getName() + "</h1> <br/>";
            info += "<b>Version :</b> " + plg.getVersion() + "<br/>";
            info += "<b>Author  :</b> " + plg.getAuthor();
            info += "<br/><br/>";
            info += "<h2>Plugin Description</h2> <br/>";
            info += plg.getDescription();
            info += " </html>";
            edpDetails.setText(info);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnRefreshList;
    private javax.swing.JButton btnRescan;
    private org.jdesktop.swingx.JXEditorPane edpDetails;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private org.jdesktop.swingx.JXHeader jXHeader2;
    private org.jdesktop.swingx.JXPanel jXPanel2;
    private org.jdesktop.swingx.JXPanel jXPanel3;
    private ragha.ui.MyStatusBar myStatusBar1;
    private org.jdesktop.swingx.JXPanel pnlFooter;
    private org.jdesktop.swingx.JXTable tblPlugins;
    // End of variables declaration//GEN-END:variables
}
